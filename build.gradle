
plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}


group = mod_group_id
version = getVersionString()

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Used by Curios
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id

            // Used by Curios
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            // Used by Curios
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            // Used by Curios
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // JEI
        url "https://maven.blamejared.com"
    }
    maven { url 'https://modmaven.dev/' }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    // Mekanism
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    // Curios
    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": "Metall",
                "Specification-Vendor": "Fayorg",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": "Fayorg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

String getVersionString() {
    def build_server = System.getenv('CI') != null || System.getenv('BUILD_NUMBER') != null

    if (System.getenv('BUILD_VERSION') != null) {
        def version_number = System.getenv('BUILD_VERSION')
        if (version_number.startsWith("v")) {
            version_number = version_number.substring(1)
        }

        return "${version_number}"
    }

    if (System.getenv('NIGHTLY') != null) {
        def version_patch_lc = '0'
        if (System.getenv('BUILD_NUMBER') != null) {
            version_patch_lc = System.getenv('BUILD_NUMBER')
        }

        return "${mod_version_series}-nightly-${version_patch_lc}"
    }

    def version_hash = ''
    def branch_name = ''
    if (!build_server) {
        try {
            version_hash = "-" + "git rev-parse --short HEAD".execute().text.trim()
        } catch (ignored) {
        }

        try {
            branch_name = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
            branch_name = "-" + branch_name.substring(branch_name.lastIndexOf('/') + 1)
        } catch (ignored) {
        }
    }

    return "${mod_version_series}-dev${branch_name}${version_hash}"
}

String getReleaseType() {
    // If we're doing a proper build
    if (System.getenv('BUILD_VERSION') != null) {
        def version_string = System.getenv('BUILD_VERSION')

        if (version_string.toLowerCase(Locale.ROOT).contains("alpha")) {
            return 'alpha'
        } else if (version_string.toLowerCase(Locale.ROOT).contains("beta")) {
            return 'beta'
        }

        return 'release'
    }

    return null
}
